<button id="agregarProducto">Agregar Producto</button>
<span><a  href="/">Regresar</a></span> <span><button id="printButton">Imprimir Lista</button></span>
<br/>



<h1> Lista de productos en Base de Datos PREMIUM {{logueado}}  </h1>
 <div id="userId" data-user-id="{{userId}}"></div>
<form action="/DBproducts-Premium" method="GET" id="filtroForm">
  <label for="filtro">Filtrar por nombre:</label>
  <input type="text" id="filtro" name="filtro" value="{{filtro}}" /> <!-- Establece el valor del filtro -->
  <label for="codeFilter">Filtrar por código:</label>
  <input type="text" id="codeFilter" name="codeFilter" value="{{codeFilter}}" /> <!-- Establece el valor del filtro de código -->
  
  
    <label for="sort">Ordenar por:</label>
  <select id="sort" name="sort">
    <option value="">Sin orden</option>
    <option value="price_asc">Precio ascendente</option>
    <option value="price_desc">Precio descendente</option>
  </select>

    <label for="limit">Número de Elementos a Mostrar:</label>
  <input type="number" id="limit" name="limit" value="{{limit}}" />
  
  <button type="submit">Filtrar</button>
  <button type="button" id="limpiarFiltros">Limpiar</button> <!-- Botón para limpiar el formulario -->
</form>

<div>
  <ul id="DBProductsList"></ul>
</div>

{{#if hasProducts}}
 <div class="grid">
        {{#each productos }}
      
      
      <aside class="card card2">
          <div class="containerImgMenu">
          <img class="dbimg" src={{this.thumbnail}} alt={{ this.title}}/>
        </div>
        <div class="containerIngredientes">
        <h3 class="textotituloMenu">{{ this.title}}</h3>
          <h4 class="textotituloMenu">Precio: $ {{this.price}} </h4>
          <p> Stock: {{this.stock}}</p>
        </div>
         <div>
          <a href="DBProducts/{{ this._id }}">Más detalles</a>
          
          {{#compareOwners this.owner ../logueado}}
           <a href="editarProducto-Premium/{{ this._id }}" class="editar-producto">Editar Producto</a>
          <a href="eliminarProducto-Premium/" class="eliminar-producto" data-product-id="{{ this._id }}">Eliminar</a>
           {{else}}
           <a href="#" data-product-id="{{ this._id }}" data-product-name="{{ this.title }}" data-product-price="{{ this.price }}" data-product-stock="{{ this.stock }}">Agregar al Carrito</a>
    <input type="number" id="quantityInput{{ this._id }}" min="1" max="{{ this.stock }}" value="1">
          
          {{/compareOwners}}
          
          
        </div>
      </aside>       
       
        {{/each }}
    {{else}}
    <h1> ¡No se encontraron productos! </h1>
    {{/if}}
<br>
  <a href="/DBProducts-Premium?pagina=1">Pág. 1</a>
  {{#if hasPrevPage}}
      <a href="/DBProducts-Premium?pagina={{prevPage}}">Prev. Pág</a>
  {{else}}
  <span>Prev. Pág.</span>
  {{/if}}

  {{#if hasNextPage}}
      <a href="/DBProducts-Premium?pagina={{nextPage}}">Next. Pág</a>
  {{else}}
  <span>Next. Pág.</span>
  {{/if}}
    <a href="/DBProducts-Premium?pagina={{totalPages}}">Ult. página</a>
 </div> 

<!-- Ventana modal para AGREGAR PRODUCTOS -->
<div id="modal" class="modal">
  <div class="modal-scrollable-content">
    <span class="close" id="cerrarModal">&times;</span>
    <h2>Ingresar Producto</h2>
    <form id="productForm" action="/DBProducts" method="POST">
      <label for="title">Título:</label>
      <input type="text" id="title" name="title" required />

      <label for="description">Descripción:</label>
      <input id="description" name="description" required></input>

      <label for="price">Precio:</label>
      <input type="number" id="price" name="price" step="0.01" required />

      <label for="thumbnail">URL de la Imagen:</label>
      <input type="url" id="thumbnail" name="thumbnail" required />

      <label for="code">Código:</label>
      <input type="text" id="code" name="code" required />

      <label for="stock">Stock:</label>
      <input type="number" id="stock" name="stock" required />
      <label for="owner">Propietario (Email):</label>
      <input
        type="text"
        id="owner"
        name="owner"
        value="{{usuario.email}}"
        placeholder="Correo electrónico" 
        readonly  
        required
      />
      <button type="submit">Agregar Producto</button>
    </form>
  </div>
</div>
<script>
document.addEventListener("DOMContentLoaded", function () {
  const agregarAlCarritoBotones = document.querySelectorAll("[data-product-id]");

  agregarAlCarritoBotones.forEach((boton) => {
    boton.addEventListener("click", async function (event) {
      event.preventDefault();

      const productId = this.getAttribute("data-product-id");
      const productName = this.getAttribute("data-product-name");
      const productPrice = this.getAttribute("data-product-price");
      const productStock = this.getAttribute("data-product-stock");
      const productQuantityInput = document.getElementById(`quantityInput${productId}`);
      const productQuantity = parseInt(productQuantityInput.value);

      // Validar que la cantidad sea mayor o igual a 1
      if (productQuantity < 1) {
        alert(`La cantidad debe ser mayor o igual a 1`);
        return;
      }

      if (productQuantity > productStock) {
        alert(`¡Stock insuficiente! La cantidad seleccionada excede el stock disponible (${productStock} unidades).`);
        return;
      }

      const userId = document.getElementById("userId").dataset.userId;

      try {
        const response = await fetch(`/api/carts/${userId}/agregarProducto`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            products: [{ productoId: productId, quantity: productQuantity }],
          }),
        });

        const data = await response.json();

        if (response.status === 200) {
          alert(`${productName} (${productQuantity} unidades) agregado al carrito con éxito`);
        } else {
          alert(`Error al agregar ${productName} al carrito: ${data.mensaje}`);
        }
      } catch (error) {
        console.error(error);
        alert(`Error al agregar ${productName} al carrito`);
      }
    });
  });
});
</script>
<script src="assets/scripts/modalAddProduct.js"></script>
<script type="module" src="assets/scripts/deleteProduct-Premium.js"></script> 
<script type="module" src="assets/scripts/print.js"></script> 
<script type="module" src="assets/scripts/dbProductsfilter.js"></script> 



{{!-- <script>
document.addEventListener("DOMContentLoaded", function () {
  const agregarAlCarritoBotones = document.querySelectorAll("[data-product-id]");

  agregarAlCarritoBotones.forEach((boton) => {
    boton.addEventListener("click", function (event) {
      event.preventDefault();

      const productId = this.getAttribute("data-product-id");
      const productName = this.getAttribute("data-product-name");
      const productPrice = this.getAttribute("data-product-price");
      const productStock = this.getAttribute("data-product-stock");
      const productQuantityInput = document.getElementById(`quantityInput${productId}`);
      const productQuantity = parseInt(productQuantityInput.value);

      // Validar que la cantidad sea mayor o igual a 1
      if (productQuantity < 1) {
        alert(`La cantidad debe ser mayor o igual a 1`);
        return;
      }

      if (productQuantity > productStock) {
        alert(`¡Stock insuficiente! La cantidad seleccionada excede el stock disponible (${productStock} unidades).`);
        return;
      }

      const userId = document.getElementById("userId").dataset.userId;

      fetch(`/api/carts/${userId}/agregarProducto`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          products: [{ productoId: productId, quantity: productQuantity }],
        }),
      })
        .then((response) => {
          if (response.status === 200) {
            alert(`${productName} (${productQuantity} unidades) agregado al carrito con éxito`);
          } else {
            alert(`Error al agregar ${productName} al carrito`);
          }
        })
        .catch((error) => {
          console.error(error);
          alert(`Error al agregar ${productName} al carrito`);
        });
    });
  });
});
</script> --}}
